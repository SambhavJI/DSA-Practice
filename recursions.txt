When a function calls itself it is called recursion. Base case tells us that when we have to stop the recursion.If if we dont give base case segmentation error will happen. 
Watch video lec31 for recursion tree and how recursion works,recursive function consist of three parts i.e base case , processing part and recursive part.
if the processing part is above the recursive part then the recurrsion is called tail recrrusion othewise it is called head recursion.
Climb Stairs Problem->In this problem we need to find the minimum number of ways in which you can climb stairs upto n. To solve this in more optimized way we need to know concepts of DP. The recursive way to solve this is to find the base case when n is less than 0 we return 0 as there are no stairs below zero and if n is 0 then we return 1 as their are exacty one way to climb the first stair and the recursion condition is calling the n-1 and n-2 cases as there are these two ways to climb the nth stair.
To check if an array is sorted through recrrusion we will take The base case in the isSorted function checks if the array has zero or one element (size == 0 || size == 1), in which case it is considered sorted and returns true. The recursive call compares the first two elements (arr[0] > arr[1]); if the first element is greater than the second, the function returns false. Otherwise, it recursively calls isSorted(arr + 1, size - 1), reducing the array size by one and checking the remaining elements until the base case is reached.
Linear search -> TO solve this through recursion the base case will be that if size i zero then the element is not found. For the recursive part we will store the remaining array in the remaining part function which returns true or false in this we make the recursive call linearSearch(arr+1,key) here if the key is not found in the first element the function will go to the arr+1 index and check if the key is present there and return true if the key is found.
Binary search -> To do binary search with recursion here we will make a function to pass start,end , array , key and in the base case we will return false if start is greater then end,then we will calculate mid  after that we will make a recursive call that if arr[mid] < key (i.e we will search in the right half) where we will call the function again and change the value of start to mid+1 and in else case where we will search the left part we will call the function by changing end to mid -1 and if the arr [mid] == key we will return true.This is how we can make the recursive method of binary search.
RECURSION IN STRINGS :-
Here we will do the same problems that we did in strings but with recursion.
Reverse String -> To reverse string via recursion the base case will be when start of string is greater than end index of string, now we will swap the elements at start and end index and after that in the recursive call we will call the function again and in place of start we will use start++ and end--.You have to pass the value in the function by reference to make the function work.
Check Palindrome-> To check palindrome in a a string we will have the same logic as reverse but instead of swapping we will compare them to check if both are same then make start++ and end-- in recursive call.
Bubble Sort -> To solve this throgh recursion the base case will be when the size is 0 or 1 we will return true as the array will be already sorted, now we will use a for loop to check if arr[i]>arr[i+1] and if yes we will swap the elements, now in the recursive relation we will ass the array in the function with size n-1.

How to solve subsets question on leetcode:- 
Lets say we have an array of elements {1,2,3} to solve this we will first take an empty set along with our given set in the first steep we will exclude the first element i.e 1 in the empty subset whichwill make two cases {1,2,3} and {empty} side by side we will take another route and include the first elemnt in the subset so the cases will be {1,2,3} and{1}. 
Now as we have two diffrent cases we will again apply the same logic on the second element and this will keep on going until the whole array is traversed and the number of cases handled will be the total number of substs of the question. This will be solve via recursion.

How to solve Subsequences in a string problem :-
To solve this question we will use recurrsion here again we will apply the same logic of excluding or including. The base case will be when the index is greater than the string. Lets say we have a string "abc" first we exclude "abc" "" and the index will be at be and then we will include and get "abc","a" and index will be at b , after that we will use recursions to find all the possible values.