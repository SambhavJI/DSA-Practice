Macros->In C++, a macro is part of code that is expanded to its value. Macros are defined using the #define directive. They provide a way to create symbolic constants and code snippets that can be reused throughout a program. Macros are processed by the C++ preprocessor, which runs before the actual compilation. During preprocessing, macros are replaced with their corresponding values, making it an effective tool for code generation and simplification.
Lets say we have to declare pi as macro #define Pi 3.14 . So the preprocessor of cpp replaces all the places where Pi is written to 3.14.This value cannot be changed in main function and it does not take any space.
Global Variables-> Global variables are the variables defined beneath the header files and these can be used anywhere in the whole program without the need to define it again and again. the use of global variable is a bad practice as it can be changed by anyone.
Inline Functions-> Inline functions are used to reduce the function call overhead.If a function is of single line so it can be made into an inline function which works the same way as macro where whenever the function is called it is replaced with function body but it is only applicable for 1-2 line functions.
Default Arguments-> If in a function called one or more arguments is missing then the compiler runs a default argument which is declare like getMax(int n=5);
